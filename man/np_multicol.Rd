% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/np_multicol.R
\name{np_multicol}
\alias{np_multicol}
\title{Neil Pearce's multicollinearity}
\usage{
np_multicol(model, main_effect, covariates)
}
\arguments{
\item{model}{A regression model}

\item{main_effect}{A string variable giving the main exposure of interest}

\item{covariates}{A vector of strings giving the covariates to assess for multicollinearity as a}
}
\value{
A dataframe
}
\description{
Detect multicollinearity using Neal Pearce's change in root mean square error
}
\details{
This function assess multicollinearity in a regression model using the
strategy described in Greenland, Daniel and Pearce, 2016.
It translates a procedure written in Excel by my friend Adrian Root.

The function will take a regression model and a vector of covariates, and drop them
one-by-one.
The relative change in root mean square error (`rel_rmse`) is returned in a
dataframe, along with the regression co-efficients for the 'main' exposure of
interest.

A value of less than one indicates that the root mean square error is larger
in the reduced model than the full model, indicating that confounding by the
dropped covariate is greater than multicollinearity.
Conversely, a value less than one indicates the possibility of
multicollinearity.

Since the function repeatedly re-fits a regression model, as many times as
there are covariates there are to test, it is likely that the function will
take a long time to run when large datasets are being used.
}
\examples{

data(mtcars)

mt_m <- lm(mpg ~ ., data = mtcars) # fit regression model with all covariates
mt_vars <- names(mtcars) # create vector of covariates to examine for collinearity
mt_vars <- mt_vars[!mt_vars \%in\% c("mpg", "wt")] # drop the outcome and main effect

np_multicol(model = mt_m, main_effect = "wt", covariates = mt_vars)
}
